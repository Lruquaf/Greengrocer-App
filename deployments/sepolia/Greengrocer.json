{
  "address": "0x4f5e61cfFa9FC3F07c7f82842a4E11c7c7Ff0026",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_products",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wholesaler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "ProductBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "buyProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "products",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wholesaler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x221609549524c39ad29cbf8634efa400b933967dd3fb29e3ea88ff11b3d93d9a",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0x4f5e61cfFa9FC3F07c7f82842a4E11c7c7Ff0026",
    "transactionIndex": 13,
    "gasUsed": "1050902",
    "logsBloom": "0x
    "blockHash": "0x12c903b3e9e18db65771ecf2b6f4a2190e753e90440429fdf13f569432f0d3b5",
    "transactionHash": "0x221609549524c39ad29cbf8634efa400b933967dd3fb29e3ea88ff11b3d93d9a",
    "logs": [],
    "blockNumber": 3549104,
    "cumulativeGasUsed": "5318208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5fFc2A4d5154238f5d9b6dd01060a2737866AB2e",
    "0xA7a44587F24bcA4513A8B5D9e8320B1B297efA1c",
    "0x0d087823f0B0E6d5d7dE7eD56636763eeCB52945"
  ],
  "numDeployments": 2,
  "solcInputHash": "e16dbd838d028282895bf7e62478f260",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_products\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wholesaler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ProductBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buyProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"products\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wholesaler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Greengrocer.sol\":\"Greengrocer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Greengrocer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ncontract Greengrocer {\\r\\n    address public seller;\\r\\n    address public wholesaler;\\r\\n    IERC1155 public products;\\r\\n\\r\\n    mapping(address => uint256) public claimableFees;\\r\\n    mapping(uint256 => uint256) public prices;\\r\\n\\r\\n    event PriceSet(uint256 id, uint256 newPrice);\\r\\n    event ProductBought(uint256 id, address buyer);\\r\\n    event Withdrawn(address receiver, uint256 amount);\\r\\n\\r\\n    constructor(address _products, address _seller, address _wholesaler) {\\r\\n        products = IERC1155(_products);\\r\\n        seller = _seller;\\r\\n        wholesaler = _wholesaler;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 _id, uint256 _newPrice) public {\\r\\n        require(msg.sender == seller, \\\"Only seller can change prices!\\\");\\r\\n        prices[_id] = _newPrice;\\r\\n        emit PriceSet(_id, _newPrice);\\r\\n    }\\r\\n\\r\\n    function buyProduct(uint256 _id) public payable {\\r\\n        require(msg.value == prices[_id], \\\"Incorrect value!\\\");\\r\\n        claimableFees[seller] += (msg.value * 9) / 10;\\r\\n        claimableFees[wholesaler] += (msg.value * 1) / 10;\\r\\n        products.safeTransferFrom(seller, msg.sender, _id, 1, \\\"\\\");\\r\\n        emit ProductBought(_id, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        require(\\r\\n            msg.sender == seller || msg.sender == wholesaler,\\r\\n            \\\"Caller is not seller or wholesaler!\\\"\\r\\n        );\\r\\n        uint256 amount = claimableFees[msg.sender];\\r\\n        claimableFees[msg.sender] = 0;\\r\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed!\\\");\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function getAmount(uint256 _id) public view returns (uint256) {\\r\\n        return products.balanceOf(seller, _id);\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 _id) public view returns (uint256) {\\r\\n        return prices[_id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf32f3975406aa48ab94f5c1a664aeed697a31bb6c44e3d5f97e55a777c5c27bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012973803806200129783398181016040528101906200003791906200016c565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001c8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060006060848603121562000188576200018762000102565b5b6000620001988682870162000155565b9350506020620001ab8682870162000155565b9250506040620001be8682870162000155565b9150509250925092565b6110bf80620001d86000396000f3fe6080604052600436106100915760003560e01c80639980ec86116100595780639980ec861461015c578063bc31c1c114610199578063c71e261f146101d6578063e757223014610201578063f7d975771461023e57610091565b806308551a53146100965780633ccfd60b146100c15780636c4233b1146100d85780637e0b2492146101035780638642269e14610140575b600080fd5b3480156100a257600080fd5b506100ab610267565b6040516100b891906109d9565b60405180910390f35b3480156100cd57600080fd5b506100d661028b565b005b3480156100e457600080fd5b506100ed6104e3565b6040516100fa91906109d9565b60405180910390f35b34801561010f57600080fd5b5061012a60048036038101906101259190610a25565b610509565b6040516101379190610a6b565b60405180910390f35b61015a60048036038101906101559190610ab2565b610521565b005b34801561016857600080fd5b50610183600480360381019061017e9190610ab2565b610785565b6040516101909190610a6b565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190610ab2565b61085a565b6040516101cd9190610a6b565b60405180910390f35b3480156101e257600080fd5b506101eb610872565b6040516101f89190610b3e565b60405180910390f35b34801561020d57600080fd5b5061022860048036038101906102239190610ab2565b610898565b6040516102359190610a6b565b60405180910390f35b34801561024a57600080fd5b5061026560048036038101906102609190610b59565b6108b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103325750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036890610c1c565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161042090610c6d565b60006040518083038185875af1925050503d806000811461045d576040519150601f19603f3d011682016040523d82523d6000602084013e610462565b606091505b50509050806104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049d90610cce565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d533836040516104d7929190610cee565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b60046000828152602001908152602001600020543414610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90610d63565b60405180910390fd5b600a6009346105859190610db2565b61058f9190610e3b565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105fe9190610e6c565b92505081905550600a6001346106149190610db2565b61061e9190610e3b565b60036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068e9190610e6c565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460016040518563ffffffff1660e01b81526004016107179493929190610f31565b600060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b505050507f60751e87ab3312710ec7d4da85ea804d0813ca2cb843a75cc23c672e1bd3954a813360405161077a929190610f89565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610803929190610cee565b60206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190610fc7565b9050919050565b60046020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a90611040565b60405180910390fd5b8060046000848152602001908152602001600020819055507fa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a828260405161098c929190611060565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109c382610998565b9050919050565b6109d3816109b8565b82525050565b60006020820190506109ee60008301846109ca565b92915050565b600080fd5b610a02816109b8565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b600060208284031215610a3b57610a3a6109f4565b5b6000610a4984828501610a10565b91505092915050565b6000819050919050565b610a6581610a52565b82525050565b6000602082019050610a806000830184610a5c565b92915050565b610a8f81610a52565b8114610a9a57600080fd5b50565b600081359050610aac81610a86565b92915050565b600060208284031215610ac857610ac76109f4565b5b6000610ad684828501610a9d565b91505092915050565b6000819050919050565b6000610b04610aff610afa84610998565b610adf565b610998565b9050919050565b6000610b1682610ae9565b9050919050565b6000610b2882610b0b565b9050919050565b610b3881610b1d565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b60008060408385031215610b7057610b6f6109f4565b5b6000610b7e85828601610a9d565b9250506020610b8f85828601610a9d565b9150509250929050565b600082825260208201905092915050565b7f43616c6c6572206973206e6f742073656c6c6572206f722077686f6c6573616c60008201527f6572210000000000000000000000000000000000000000000000000000000000602082015250565b6000610c06602383610b99565b9150610c1182610baa565b604082019050919050565b60006020820190508181036000830152610c3581610bf9565b9050919050565b600081905092915050565b50565b6000610c57600083610c3c565b9150610c6282610c47565b600082019050919050565b6000610c7882610c4a565b9150819050919050565b7f5472616e73666572206661696c65642100000000000000000000000000000000600082015250565b6000610cb8601083610b99565b9150610cc382610c82565b602082019050919050565b60006020820190508181036000830152610ce781610cab565b9050919050565b6000604082019050610d0360008301856109ca565b610d106020830184610a5c565b9392505050565b7f496e636f72726563742076616c75652100000000000000000000000000000000600082015250565b6000610d4d601083610b99565b9150610d5882610d17565b602082019050919050565b60006020820190508181036000830152610d7c81610d40565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dbd82610a52565b9150610dc883610a52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0157610e00610d83565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4682610a52565b9150610e5183610a52565b925082610e6157610e60610e0c565b5b828204905092915050565b6000610e7782610a52565b9150610e8283610a52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb757610eb6610d83565b5b828201905092915050565b6000819050919050565b6000610ee7610ee2610edd84610ec2565b610adf565b610a52565b9050919050565b610ef781610ecc565b82525050565b600082825260208201905092915050565b6000610f1b600083610efd565b9150610f2682610c47565b600082019050919050565b600060a082019050610f4660008301876109ca565b610f5360208301866109ca565b610f606040830185610a5c565b610f6d6060830184610eee565b8181036080830152610f7e81610f0e565b905095945050505050565b6000604082019050610f9e6000830185610a5c565b610fab60208301846109ca565b9392505050565b600081519050610fc181610a86565b92915050565b600060208284031215610fdd57610fdc6109f4565b5b6000610feb84828501610fb2565b91505092915050565b7f4f6e6c792073656c6c65722063616e206368616e676520707269636573210000600082015250565b600061102a601e83610b99565b915061103582610ff4565b602082019050919050565b600060208201905081810360008301526110598161101d565b9050919050565b60006040820190506110756000830185610a5c565b6110826020830184610a5c565b939250505056fea2646970667358221220a7f23a9306e0a8402470d0909fac4224790029ce3f6f43ccd9a3d51abd30d91b64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80639980ec86116100595780639980ec861461015c578063bc31c1c114610199578063c71e261f146101d6578063e757223014610201578063f7d975771461023e57610091565b806308551a53146100965780633ccfd60b146100c15780636c4233b1146100d85780637e0b2492146101035780638642269e14610140575b600080fd5b3480156100a257600080fd5b506100ab610267565b6040516100b891906109d9565b60405180910390f35b3480156100cd57600080fd5b506100d661028b565b005b3480156100e457600080fd5b506100ed6104e3565b6040516100fa91906109d9565b60405180910390f35b34801561010f57600080fd5b5061012a60048036038101906101259190610a25565b610509565b6040516101379190610a6b565b60405180910390f35b61015a60048036038101906101559190610ab2565b610521565b005b34801561016857600080fd5b50610183600480360381019061017e9190610ab2565b610785565b6040516101909190610a6b565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190610ab2565b61085a565b6040516101cd9190610a6b565b60405180910390f35b3480156101e257600080fd5b506101eb610872565b6040516101f89190610b3e565b60405180910390f35b34801561020d57600080fd5b5061022860048036038101906102239190610ab2565b610898565b6040516102359190610a6b565b60405180910390f35b34801561024a57600080fd5b5061026560048036038101906102609190610b59565b6108b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103325750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036890610c1c565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161042090610c6d565b60006040518083038185875af1925050503d806000811461045d576040519150601f19603f3d011682016040523d82523d6000602084013e610462565b606091505b50509050806104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049d90610cce565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d533836040516104d7929190610cee565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b60046000828152602001908152602001600020543414610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90610d63565b60405180910390fd5b600a6009346105859190610db2565b61058f9190610e3b565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105fe9190610e6c565b92505081905550600a6001346106149190610db2565b61061e9190610e3b565b60036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068e9190610e6c565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460016040518563ffffffff1660e01b81526004016107179493929190610f31565b600060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b505050507f60751e87ab3312710ec7d4da85ea804d0813ca2cb843a75cc23c672e1bd3954a813360405161077a929190610f89565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610803929190610cee565b60206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190610fc7565b9050919050565b60046020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a90611040565b60405180910390fd5b8060046000848152602001908152602001600020819055507fa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a828260405161098c929190611060565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109c382610998565b9050919050565b6109d3816109b8565b82525050565b60006020820190506109ee60008301846109ca565b92915050565b600080fd5b610a02816109b8565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b600060208284031215610a3b57610a3a6109f4565b5b6000610a4984828501610a10565b91505092915050565b6000819050919050565b610a6581610a52565b82525050565b6000602082019050610a806000830184610a5c565b92915050565b610a8f81610a52565b8114610a9a57600080fd5b50565b600081359050610aac81610a86565b92915050565b600060208284031215610ac857610ac76109f4565b5b6000610ad684828501610a9d565b91505092915050565b6000819050919050565b6000610b04610aff610afa84610998565b610adf565b610998565b9050919050565b6000610b1682610ae9565b9050919050565b6000610b2882610b0b565b9050919050565b610b3881610b1d565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b60008060408385031215610b7057610b6f6109f4565b5b6000610b7e85828601610a9d565b9250506020610b8f85828601610a9d565b9150509250929050565b600082825260208201905092915050565b7f43616c6c6572206973206e6f742073656c6c6572206f722077686f6c6573616c60008201527f6572210000000000000000000000000000000000000000000000000000000000602082015250565b6000610c06602383610b99565b9150610c1182610baa565b604082019050919050565b60006020820190508181036000830152610c3581610bf9565b9050919050565b600081905092915050565b50565b6000610c57600083610c3c565b9150610c6282610c47565b600082019050919050565b6000610c7882610c4a565b9150819050919050565b7f5472616e73666572206661696c65642100000000000000000000000000000000600082015250565b6000610cb8601083610b99565b9150610cc382610c82565b602082019050919050565b60006020820190508181036000830152610ce781610cab565b9050919050565b6000604082019050610d0360008301856109ca565b610d106020830184610a5c565b9392505050565b7f496e636f72726563742076616c75652100000000000000000000000000000000600082015250565b6000610d4d601083610b99565b9150610d5882610d17565b602082019050919050565b60006020820190508181036000830152610d7c81610d40565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dbd82610a52565b9150610dc883610a52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0157610e00610d83565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4682610a52565b9150610e5183610a52565b925082610e6157610e60610e0c565b5b828204905092915050565b6000610e7782610a52565b9150610e8283610a52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb757610eb6610d83565b5b828201905092915050565b6000819050919050565b6000610ee7610ee2610edd84610ec2565b610adf565b610a52565b9050919050565b610ef781610ecc565b82525050565b600082825260208201905092915050565b6000610f1b600083610efd565b9150610f2682610c47565b600082019050919050565b600060a082019050610f4660008301876109ca565b610f5360208301866109ca565b610f606040830185610a5c565b610f6d6060830184610eee565b8181036080830152610f7e81610f0e565b905095945050505050565b6000604082019050610f9e6000830185610a5c565b610fab60208301846109ca565b9392505050565b600081519050610fc181610a86565b92915050565b600060208284031215610fdd57610fdc6109f4565b5b6000610feb84828501610fb2565b91505092915050565b7f4f6e6c792073656c6c65722063616e206368616e676520707269636573210000600082015250565b600061102a601e83610b99565b915061103582610ff4565b602082019050919050565b600060208201905081810360008301526110598161101d565b9050919050565b60006040820190506110756000830185610a5c565b6110826020830184610a5c565b939250505056fea2646970667358221220a7f23a9306e0a8402470d0909fac4224790029ce3f6f43ccd9a3d51abd30d91b64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Greengrocer.sol:Greengrocer",
        "label": "seller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 140,
        "contract": "contracts/Greengrocer.sol:Greengrocer",
        "label": "wholesaler",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 143,
        "contract": "contracts/Greengrocer.sol:Greengrocer",
        "label": "products",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC1155)121"
      },
      {
        "astId": 147,
        "contract": "contracts/Greengrocer.sol:Greengrocer",
        "label": "claimableFees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 151,
        "contract": "contracts/Greengrocer.sol:Greengrocer",
        "label": "prices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155)121": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}